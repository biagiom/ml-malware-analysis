import os
import re
from math import ceil
import random


def build_dataset(dataset_path="./drebin/feature_vectors/",
                  family_labels_path="./drebin/sha256_family.csv",
                  feature_list=['permission', 'call', 'url'],
                  max_samples=1000,
                  eta=1,
                  rand_seed=0,
                  mode="default",
                  adv_parsing=False,
                  debug=False):
    """
    :param dataset_path: string (default: ./feature_vectors/)
        path of the directory containing the applications files (docs)
    :param family_labels_path: string (default: /sha256_family.csv)
        path of the CSV file containing the list of malware and the related family
    :param feature_list: list
        list of feature to consider when parsing the application files
    :param max_samples: int
        maximum number of samples (docs) to read when building the dataset
    :param eta:
        coefficient to control the number of malware in the
    :param adv_parsing:
        boolean flag to perform additional parsing when extracting the features (lines)
        from each application file
    :param debug:
        boolean flag to enable or disable the printing of debug info
    :return:
        dataset : set (dictionary) of dictionaries, shape = [n_samples, n_features]
    """

    # The DREBIN dataset (https://www.sec.cs.tu-bs.de/~danarp/drebin/dataset/dataset_splits.zip)
    # The following objects are needed:
    # * sha256_family.csv -> Family Labels: it contains the SHA256 hash of all malware samples in the dataset
    #                        and corresponding AV family labels. You need to specify the path of this file using
    #                        the parameters 'family_labels_path'
    # * feature_vector -> Dataset consisting of many files. Each file is named using the SHA256 of the corresponding
    #                     application and contains all the application's features extracted from the Manifest.xml file
    #                     and the disassembled code.
    #                     Features are grouped into 8 sets:
    #
    #                     |      Features of Manifest.xml      |              label               |
    #                     -------------------------------------------------------------------------
    #                     | S1) Requested hardware components  |            feature               |
    #                     | S2) Requested permission           |           permission             |
    #                     | S3) App components                 |      activity, service_receiver, |
    #                     |                                    |      provider, service           |
    #                     | S4) Filtered Intents               |            intent                |
    #                     -------------------------------------------------------------------------
    #
    #                     |    Features of disassembled code   |              label               |
    #                     -------------------------------------------------------------------------
    #                     | S5) Restricted API calls           |            api_calls             |
    #                     | S6) Used permissions               |          real_permission         |
    #                     | S7) Suspicious API calls           |               call               |
    #                     | S8) Network Addresses              |               url                |
    #

    if os.path.exists(dataset_path) and os.path.exists(family_labels_path) and \
            os.path.isdir(dataset_path) and os.path.isfile(family_labels_path):

        try:
            # parse the family labels file:
            with open(family_labels_path, 'r') as fam_labels:
                malware_list = fam_labels.read().splitlines()
                malwares = {}
                # for each line in the family labels file split the class value from the sha256
                for line in malware_list:
                    # skip the first line
                    if line == "sha256,family":
                        continue
                    (sha256, target) = line.split(",")
                    malwares[sha256] = target

            num_malware = len(malwares)

            dataset = {}

            app_list = os.listdir(dataset_path)

            if mode == "skip_safe" or mode == 2:
                num_app = num_malware
                f_mw = 1.0
            else:
                num_app = len(app_list)

                if eta > 10:
                    eta = 10
                elif eta < 0:
                    eta = 1

                # f_mw is the frequency of the malware wrt the whole dataset
                # (i.e., the ration between the number of the malware and the total number of apps in the dataset)
                # the user can increase this parameter by using the 'eta' variable.
                # In this way the dataset will have the same frequency of malwares (and safe apps) as the initial set
                f_mw = eta * num_malware / num_app

                # Check if the malware frequency doesn't overcome 30 %
                if f_mw > 0.3:
                    f_mw = 0.3

            if max_samples > num_app or max_samples < 0:
                max_samples = num_app

            max_mw = ceil(f_mw * max_samples)
            max_safe_app = max_samples - max_mw

            random.seed(rand_seed)
            selected_mw = random.sample(list(malwares), max_mw)
            selected_safe_apps = random.sample(list(set(app_list) - set(selected_mw)), max_safe_app)
            selected_apps = selected_mw + selected_safe_apps

            print("Number of malware in the dataset: ".format(num_malware))
            print("Total number of apps in the dataset: {}".format(num_app))
            print("Malware frequency (percentage of malware in the training set): {:.2f}".format(f_mw))
            print("Number of selected samples in the dataset: {}".format(max_samples))
            print("Number of selected malware apps in the dataset: {}".format(max_mw))
            print("Number of selected safe apps in the dataset: {}".format(max_safe_app))
            if debug is True:
                print("Selected malwares:")
                print(selected_mw)
                print('{:-<50}'.format(""))
                print("Selected safe apps:")
                print(selected_safe_apps)
            print('{:-<50}'.format(""))

            # parse the selected application files in the dataset
            for sha256_app in selected_apps:
                filepath = dataset_path + sha256_app
                # print(filepath)
                with open(filepath, 'r') as app_file:
                    dataset[sha256_app] = {}
                    dataset[sha256_app]["features"] = {}

                    # if the application has been classified as a malware, add the related class ...
                    if sha256_app in malwares:
                        if mode == "bin_class" or mode == 1:
                            dataset[sha256_app]["target"] = "malware"
                        else:
                            dataset[sha256_app]["target"] = malwares[sha256_app]
                    else:
                        dataset[sha256_app]["target"] = "safe"

                    app_features = app_file.read().splitlines()

                    for f in app_features:
                        if not (re.match(r"(^::.*)|(^.*::$)", f) or f == ""):
                            (f_type, f_value) = f.split("::", 1)
                            if f_type in feature_list:
                                if adv_parsing is True:
                                    if f_type == "intent":
                                        f_value = re.sub(r"^android.intent.", "", f_value)
                                    elif f_type == "real_permission" or f_type == "permission":
                                        f_value = re.sub(r"^android.permission.", "", f_value)
                                    elif f_type == "api_call":
                                        f_value = re.sub(r";->.*$", "", f_value)
                                    elif f_type == "feature":
                                        f_value = re.sub(r"^android.hardware.", "", f_value)
                                    elif f_type == "url":
                                        f_value = re.sub(r"(^https://|www.)|(^http://|www.)|(/.*)", "", f_value)

                                if f_value in dataset[sha256_app]["features"]:
                                    dataset[sha256_app]["features"][f_value] += 1
                                else:
                                    dataset[sha256_app]["features"][f_value] = 1

                    if debug is True:
                        print("App (SHA256): ", sha256_app)
                        print("Target: ", dataset[sha256_app]["target"])
                        print("Feature  #Occur")
                        for f in dataset[sha256_app]["features"]:
                            print("{f}: {count}".format(f=f, count=dataset[sha256_app]["features"].get(f)))
                        print('{:-<30}'.format(""))

            return dataset

        except IOError:
            print("Can't open the family labels file or the application file. Please check their path.")
            return None

    else:
        print("Error parse_dataset: Wrong paths for family labels file or 'feature_vector' dir")
        return None
