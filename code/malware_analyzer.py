import naive_bayes_text as nb
from util import build_dataset

dataset_path = "../drebin/feature_vectors/"
family_labels_path = "../drebin/sha256_family.csv"
feature_list = ['permission', 'call', 'url', 'api_call']
eta = 1
types = ["bernoulli", "multinomial"]
mode = "default"
rseed = 10
num_samples = 3000

DEBUG = False

if __name__ == '__main__':
    # argument list for parse_dataset function:
    dataset = build_dataset(dataset_path, family_labels_path, feature_list, num_samples,
                          eta, rseed, mode, True, False)

    nb_classifier = nb.NaiveBayesText(debug_mode=False, perc=2/3, rand_seed=rseed)

    train_set, train_class, test_set, test_class, classes = nb_classifier.split_dataset(dataset,
                                                                                        parse_func=parse_dataset)

    print("*** Malware Classification ***")
    for t in types:
        if t == "bernoulli":
            print("Using the Naive Bayes classifier with multivariate Bernoulli distribution")
        else:
            print("Using the Naive Bayes classifier with Multinomial distribution")

        nb_classifier.fit(train_set, train_class, classes, t)

        estimated_class = nb_classifier.classify(test_set, classes)

        if DEBUG is True:
            print("Estimated class labels:")
            print(estimated_class)
            print("Target (True) class labels:")
            print(test_class)

        accuracy, conf_matrix = nb_classifier.evaluate(estimated_class, test_class, classes)
        print("Classes:")
        print(classes)
        print("Accuracy: {a}".format(a=accuracy))
        print("Confusion matrix:")
        print(conf_matrix)

        class_map = {1: [c for c in classes if c != "safe"], 0: ["safe"]}
        roc_param = nb_classifier.roc_evaluation(estimated_class, test_class, classes, class_map, convert_mulitclass=True)
        print("Performance evaluation through ROC analysis:")
        print("TP: {tp}, TN: {tn}, FP: {fp}, FN: {fn}".format(
            tp=roc_param["TP"], tn=roc_param["TN"], fp=roc_param["FP"], fn=roc_param["FN"]))

        print("Precision: {p}".format(p=roc_param["precision"]))
        print("Recall: {r}".format(r=roc_param["recall"]))
        print("Accuracy: {a}".format(a=roc_param["accuracy"]))
        print("F1-score: {f1}".format(f1=roc_param["f1-score"]))
        print('{:-<60}'.format(""))